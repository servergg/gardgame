from torchvision.transforms import GaussianBlur
import io
import os
import warnings
from flask import Flask

app = Flask(__name__)


import string
import random
from IPython.display import display
from PIL import Image
from stability_sdk import client
import stability_sdk.interfaces.gooseai.generation.generation_pb2 as generation
from matplotlib import pyplot as plt
import numpy as np


os.environ['STABILITY_HOST'] = 'grpc.stability.ai:443'


import boto3
from botocore.exceptions import NoCredentialsError

ACCESS_KEY = 'AKIA3VKA3H2SVXXUF7ML'
SECRET_KEY = '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'


def upload_to_aws(local_file, bucket, s3_file):
    s3 = boto3.client('s3', aws_access_key_id=ACCESS_KEY,
                      aws_secret_access_key=SECRET_KEY)

    try:
        upl = s3.upload_file(local_file, bucket, s3_file, ExtraArgs={'ContentType': "application/json", 'ACL': "public-read"})
        print("Upload Successful")
        return True
    except FileNotFoundError:
        print("The file was not found")
        return False
    except NoCredentialsError:
        print("Credentials not available")
        return False


@app.route("/generate/<prompt>")
def hello_world(prompt):
    stability_api = client.StabilityInference(
        key='sk-2PJqZTDhqgxi4kaRAyrdGwezaKQhFsneFxhqBE6K9luTL8J7',
        verbose=True,
    )

    print(prompt)

    img2 = Image.open('chris2.png')

    img2_grayscale = img2.convert('L')
    img2_a = np.array(img2_grayscale)

    mask = np.array(img2_grayscale)
    # this is the area that will get painted, will show up black below
    mask[img2_a < 150] = 0
    mask[img2_a >= 150] = 1  # this is the protected area, will show up white below

    strength = .2  # this controls the "strength" of the prompt relative to the init image

    d = int(255 * (1-strength))
    mask *= 255-d  # convert from range [0,1] to [0,255]
    mask += d

    mask = Image.fromarray(mask)

    blur = GaussianBlur(11, 20)
    mask = blur(mask)

    answers = stability_api.generate(
        prompt=prompt,
        init_image=img2,
        mask_image=mask,
        width=512,
        height=512,
        seed=34567,  # if we're passing in an image generated by SD, you may get better results by providing a different seed value than was used to generate the image
        start_schedule=1,
        steps=25
    )

    letters = string.ascii_letters
    filename = ''.join(random.choice(letters) for i in range(10))
    # iterating over the generator produces the api response
    for resp in answers:
        for artifact in resp.artifacts:
            if artifact.finish_reason == generation.FILTER:
                warnings.warn(
                    "Your request activated the API's safety filters and could not be processed."
                    "Please modify the prompt and try again.")
            if artifact.type == generation.ARTIFACT_IMAGE:
                img = Image.open(io.BytesIO(artifact.binary))
                img.save(filename + '.png')
                uploaded = upload_to_aws(filename + '.png', 'gardgamepublic', filename + '.png')
    return filename